name: 'Build and push action'
description: 'Creates images and pushes them to the given registry. Requires image registry credentials to push.'
inputs:
  container-registry-url:
    description: 'URL for the container registry'
    required: true
    default: ''
  container-registry-username:
    description: 'Username for the container registry'
    required: true
    default: ''
  container-registry-password:
    description: 'Password for the container registry'
    required: true
    default: ''
  container-repository-name:
    description: 'The name of the image repository, e.g. vasio/vasio-website, or just vasio-website'
    required: true
    default: ''
  dockerfile-path:
    description: 'Path to the Dockerfile'
    required: true
    default: ''
  docker-build-context:
    description: 'The build context for the docker build'
    required: false
    default: '.'
  docker-build-args:
    description: 'Additional build arguments for the docker build'
    required: false
    default: ''
  kube-config-base64:
    description: 'The base64 encoded kubeconfig needed to connect to the cluster'
    required: true
    default: ''
runs:
  using: "composite"
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to the container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.container-registry-url }}
        username: ${{ inputs.container-registry-username }}
        password: ${{ inputs.container-registry-password }}

    - name: Build and push
      if: inputs.container-registry-url != '' && inputs.container-registry-username != '' && inputs.container-registry-password != ''
      uses: docker/build-push-action@v6
      with:
        push: true
        context: ${{ inputs.docker-build-context }}
        file: ${{ inputs.dockerfile-path }}
        build-args: ${{ inputs.docker-build-args }}
        tags: ${{ inputs.container-registry-url }}/${{ inputs.container-repository-name }}:${{ github.sha }}-${{ github.run_id }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create kubeconfig file
      run: echo ${{ inputs.kube-config-base64 }} | base64 -d > kubeconfig.yml
      shell: bash

    - name: Fetch kubectl
      run: curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      shell: bash

    - name: Check if configmap exists
      id: check-configmap
      run: kubectl --kubeconfig=kubeconfig.yml get configmap cd-versions -o json
      shell: bash
      continue-on-error: true

    - name: Escape configmap name
      id: escape-configmap-name
      run: |
        IMAGE_NAME="${{ inputs.container-repository-name }}"
        IMAGE_NAME="${IMAGE_NAME##*/}"
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
      shell: bash

    - name: Create configMap if not exists
      if: steps.check-configmap.outcome == 'failure'
      run: kubectl --kubeconfig=kubeconfig.yml create configmap cd-versions --from-literal=${{ env.IMAGE_NAME }}=${{ github.sha }}-${{ github.run_id }}
      shell: bash

    - name: Update existing configmap
      if: steps.check-configmap.outcome == 'success'
      run: |
        kubectl --kubeconfig=kubeconfig.yml patch cm cd-versions --type json --patch '[{ "op": "add", "path": "/data/${{ env.IMAGE_NAME }}", "value": "${{ github.sha }}-${{ github.run_id }}" }]'
      shell: bash
